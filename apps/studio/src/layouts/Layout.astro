---
import Footer from "./Footer.astro";
import Sidebar from "@components/navigation/Sidebar.vue";
import Link from "@components/navigation/Link.astro";
import LangSwitch from "@components/navigation/LangSwitch.vue";
import ScrollDown from "@components/navigation/ScrollDown.vue";
import SbBridge from "@components/helpers/SbBridge.vue";
import Init from "@components/helpers/Init.vue";
import Toasts from "@components/helpers/Toasts.vue";
import ContactForm from "@components/bloks/premium/ContactForm.astro";
import Dialog from "@components/helpers/Dialog.vue";
import { Icon } from "astro-icon/components";
import { SEO } from "astro-seo";
import { SITE_LANG } from "astro:env/client";
import { useTranslations, getLangFromUrl } from "@lib/translate";
import { ClientRouter } from "astro:transitions";
import "@styles/globals.css";

interface Meta {
  title: string;
  description: string;
  image: string;
}
interface Props {
  meta: Meta;
  settings: any;
  localeUrls?: Record<string, string>[];
  bridge?: boolean;
}

const hex2rgb = (hex: string) => {
  const r = parseInt(hex.slice(1, 3), 16);
  const g = parseInt(hex.slice(3, 5), 16);
  const b = parseInt(hex.slice(5, 7), 16);
  return `${r} ${g} ${b}`;
};

const { settings, meta, localeUrls, bridge } = Astro.props;
const {
  main_menu,
  font_body,
  font_headings,
  surface_menu,
  surface_page,
  font_weight_body,
  font_weight_headings,
  dark_fg,
  dark_bg,
  light_fg,
  light_bg,
  primary_fg,
  primary_bg,
  secondary_fg,
  secondary_bg,
  accent_fg,
  accent_bg,
  info_fg,
  info_bg,
  warning_fg,
  warning_bg,
  danger_fg,
  danger_bg,
  success_fg,
  success_bg,
  muted_fg,
  muted_bg,
  contact_form,
  tiny_analytics_id,
  radius_media = "1",
  radius_input = "0.2",
} = settings;
const lang = getLangFromUrl(Astro.url);

const t = useTranslations(lang);

const cssColors: { [key: string]: Color } = {
  dark_fg,
  dark_bg,
  light_fg,
  light_bg,
  primary_fg,
  primary_bg,
  secondary_fg,
  secondary_bg,
  accent_fg,
  accent_bg,
  info_fg,
  info_bg,
  warning_fg,
  warning_bg,
  danger_fg,
  danger_bg,
  success_fg,
  success_bg,
  muted_fg,
  muted_bg,
};

let cssColorVars: ColorVars = {};

Object.keys(cssColors).forEach((key) => { 
  const newKey = key.replaceAll("_", "-");
  const newValue = hex2rgb(cssColors[key].color);
  cssColorVars[newKey] = newValue;
});

const labels = {
  close: t("close"),
  menu: t("menu"),
  back_to_home: t("back_to_home"),
};
 
let socialImage = meta.image + "/m/1200x630/smart/filters:format(png)";
---

<!doctype html>
<html lang={lang || SITE_LANG}>
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <title>{meta.title}</title>
    <SEO
      title={meta.title}
      description={meta.description}
      openGraph={{
        basic: {
          title: meta.title,
          type: "website",
          image: socialImage,
        },
      }}
      extend={{
        meta: [
          {
            name: "og:description",
            content: meta.description,
          },
          {
            name: "twitter:image",
            content: socialImage,
          },
          { name: "twitter:card", content: "summary_large_image" },
          { name: "twitter:title", content: meta.title },
          { name: "twitter:description", content: meta.description },
        ],
      }}
    />
    <link rel="sitemap" href="/sitemap-index.xml" />
    <style
      define:vars={{
        ...cssColorVars,
        "font-weight-body": font_weight_body,
        "font-weight-heading": font_weight_headings,
        "font-body": `var(${font_body})`,
        "font-heading": `var(${font_headings})`,
        "radius-media": `${radius_media}rem`,
        "radius-input": `${radius_input}rem`,
        muted: "115 115 115",
      }}
    >
      :root {
        --font-sysem-ui: theme(fontFamily.system-ui);
        --font-humanist: theme(fontFamily.humanist);
        --font-neo-grotesque: theme(fontFamily.neo-grotesque);
        --font-font-geometric-humanist: theme(fontFamily.geometric-humanist);
        --font-classical-humanist: theme(fontFamily.classical-humanist);
        --font-industrial: theme(fontFamily.industrial);
        --font-rounded-sans: theme(fontFamily.rounded-sans);
        --font-transitional: theme(fontFamily.transitional);
        --font-old-style: theme(fontFamily.old-style);
        --font-antique: theme(fontFamily.antique);
        --font-didone: theme(fontFamily.didone);
        --font-slab-serif: theme(fontFamily.slab-serif);
        --font-monospace-slab-serif: theme(fontFamily.monospace-slab-serif);
        --font-monospace-code: theme(fontFamily.monospace-code);
        --font-handwritten: theme(fontFamily.handwritten);
        --border: 0 0% 89.8%;
        --input: 0 0% 89.8%;
        --ring: 0 0% 3.9%;
        --radius: 0.5rem;
        --padding-inline: 1rem;
        --content-max-width: 1000px;
        --breakout-max-width: 1400px;
        @screen sm {
          --padding-inline: 2rem;
        }
        @screen md {
          --padding-inline: 4rem;
        }
      }
    </style>
    {
      bridge && (
        <script
          src="//app.storyblok.com/f/storyblok-v2-latest.js"
          type="text/javascript"
          is:inline
        />
      )
    }

    {!bridge && <ClientRouter />}
    {
      tiny_analytics_id && (
        <script
          defer
          src={`https://app.tinyanalytics.io/pixel/${tiny_analytics_id}`}
          is:inline
        />
      )
    }
  </head>
  <body class={`${surface_page || ""}`}>
    {bridge && <SbBridge client:load />}
    <header
      class="pointer-events-none fixed inset-x-0 top-0 z-50 transition-all duration-500"
    >
      <nav class="relative z-50 flex items-center justify-between gap-3 p-3">
        <a href="/" aria-label="home" class="pointer-events-auto">
          <Icon name="logo" is:inline class="h-12 w-auto" />
        </a>

        <div class="flex gap-2">
          {
            localeUrls && localeUrls.length > 1 && (
              <div class="pointer-events-auto grid place-items-center">
                <LangSwitch
                  client:idle
                  {localeUrls}
                  {lang}
                  surface={surface_menu}
                />
              </div>
            )
          }

          <ul
          class={`${surface_menu} rounded-input pointer-events-auto hidden flex-wrap items-center gap-2 p-1 shadow-md sm:flex`}
            
          >
            {
              main_menu &&
                main_menu.length > 0 &&
                main_menu.map((link:LinkStoryblok) => (
                  <li>
                    <Link blok={link} className="btn-nav" />
                  </li>
                ))
            }
          </ul>

          <Sidebar {labels} surface={surface_menu} client:idle>
              <button class="p-2" slot="icon" aria-label="menu">
                <svg
                  width="30"
                  height="30"
                  xmlns="http://www.w3.org/2000/svg"
                  viewBox="0 0 30 30"
                >
                  <path stroke-width="2" stroke="currentColor" d="M4 8 L26 8"
                  ></path>
                  <path stroke-width="2" stroke="currentColor" d="M4 15 L26 15"
                  ></path>
                  <path stroke-width="2" stroke="currentColor" d="M4 22 L26 22"
                  ></path>
                </svg>
              </button>

              <ul
                class="my-auto grid grid-cols-1 gap-2 p-4 text-sm"
                slot="menu"
              >
                {
                  main_menu &&
                    main_menu.length > 0 &&
                    main_menu.map((link:LinkStoryblok) => (
                      <li>
                        <Link
                          blok={link}
                          className="link flex text-balance items-center text-2xl btn-underline w-fit mr-auto"
                        />
                      </li>
                    ))
                }
              </ul>
            </Sidebar>
        </div>
      </nav>
    </header>
    <slot />

    <ScrollDown client:idle surface={surface_menu} />
    <Footer {settings} lang={lang || SITE_LANG} />
    <Init client:idle />

    <svg class="hide hidden">
      <filter id="noiseFilter">
        <feTurbulence
          type="fractalNoise"
          baseFrequency="2.29"
          numOctaves="1"
          stitchTiles="stitch"></feTurbulence>
      </filter>
    </svg>
    <Toasts client:idle />
    {
      contact_form && contact_form.length === 1 && (
        <Dialog
          id="contact"
          title={t("contact")}
          surface={contact_form[0]?.surface || "surface-light"}
          client:idle
        >
          <ContactForm blok={contact_form[0]} />
        </Dialog>
      )
    }
  </body>
</html>
