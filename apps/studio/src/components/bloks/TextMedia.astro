---
import { storyblokEditable, renderRichText } from "@storyblok/astro";
import VideoInline from "@components/media/VideoInline.vue";
import Picture from "@components/media/Picture.astro";
import Link from "@components/navigation/Link.astro";
import { getIdFromContent } from "@lib/storyblokApi";

interface Props {
  blok: TextMediaStoryblok;
}

const { blok } = Astro.props;
const {
  content,
  video,
  image,
  surface,
  container = "breakout",
  aspect_ratio,
  reverse,
  media_width,
  align,
  links,
  padding_top = "pt-lg",
  padding_bottom = "pb-lg",
  layout = "fill",
  crop = true,
} = blok;

const renderedRichText = renderRichText(content);
const id = getIdFromContent(content);

function getSizes() {
  const baseSize = `(min-width: 768px) ${media_width}vw, 100vw`;
  if (!container || container === "full-width") return baseSize;
  const maxWidth = container === "breakout" ? "breakout" : "content";
  return `(min-width: var(--${maxWidth}-max-width)) calc(var(--${maxWidth}-max-width) * ${media_width} / 100), ${baseSize}`;
}

const textMediaClass = `${container} text-media ${reverse ? "reverse" : ""}`;
const gridClass = `text-media__container grid grid-flow-dense grid-cols-1 gap-4 sm:gap-6 md:gap-10 xl:gap-18 ${padding_top} ${padding_bottom}`;
const figureClass = `overflow-hidden rounded-media fade-up h-fit sticky top-0 mx-auto grid place-items-start md:max-w-full`;
const contentClass = `w-full richtext max-w-2xl relative z-40 mx-auto md:mx-0 grid content-center items-center justify-self-start ${align || ""} ${reverse ? "md:col-start-1 md:row-start-1" : ""}`;
---

<div {...storyblokEditable(blok)} class={`${surface} intersection`}>
  <div
    class="content-grid"
    style={`--media-col-width:${media_width}fr; --text-col-width:${100 - parseFloat(media_width)}fr`}
    {id}
  >
    <div class={textMediaClass}>
      <div class={gridClass}>
        <div class="relative">
          <figure class={figureClass}>
            {
              !video?.filename && image?.filename && (
                <Picture
                  src={image.filename}
                  alt={image.alt || image.name}
                  className="rounded-media fade-in"
                  sizes={getSizes()}
                  ar={aspect_ratio}
                  {layout}
                  {crop}
                  artDirectives={[
                    {
                      media: "(max-width: 768px)",
                      ar: 16 / 9,
                      breakpoints: [320, 440, 640, 768],
                    },
                  ]}
                />
              )
            }
            {
              video?.filename && (
                <div class="rounded-media relative h-auto overflow-hidden fade-in">
                  <VideoInline url={video.filename} client:visible>
                    {image?.filename && (
                      <Picture
                        src={image.filename}
                        alt={image.alt || image.name}
                        className="fade-in "
                        sizes={getSizes()}
                        ar={aspect_ratio}
                        {layout}
                        {crop}
                        artDirectives={[
                          {
                            media: "(max-width: 768px)",
                            ar: 16 / 9,
                            breakpoints: [320, 440, 640, 768],
                          },
                        ]}
                      />
                    )}
                  </VideoInline>
                </div>
              )
            }
          </figure>
        </div>

        <div class={contentClass}>
          <div class="scale-in grid h-fit w-full grid-cols-1 gap-4">
            <div set:html={renderedRichText} />

            {
              links && links.length > 0 && (
                <div class="buttons inline-flex flex-wrap items-center gap-4">
                  {links.map((link) => (
                    <Link blok={link} />
                  ))}
                </div>
              )
            }
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  .text-media {
    &__container {
      @screen md {
        grid-template-columns: var(--media-col-width) minmax(
            22rem,
            var(--text-col-width)
          );
      }
    }
    @screen md {
      &.reverse .text-media__container {
        grid-template-columns: minmax(22rem, var(--text-col-width)) var(
            --media-col-width
          );
      }
    }
  }
</style>
