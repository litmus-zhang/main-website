---
import { storyblokEditable, renderRichText } from "@storyblok/astro";
import { getIdFromContent } from "@lib/storyblokApi";
import PostCard from "@components/cards/PostCard.astro";
import { getCollection } from "astro:content";
import { getLangFromUrl } from "@lib/translate";

interface Props {
  blok: ServiceStoryblok;
}
const { blok } = Astro.props;
const lang = getLangFromUrl(Astro.url);

const {
  content,
  surface = "",
  items,
  accent_surface,
  max_items = 100,
  padding_top = "pt-lg",
  padding_bottom = "pb-lg",
  container = "normal",
} = blok;

const fetchStories = async () => {
  if (items && items.length > 0) {
    const ids = items.map((item: string) => `${lang}/${item}`);
    const services = await getCollection("service", (item) =>
      ids.includes(item.id)
    );
    return services.map((item) => item.data);
  }

  const services = await getCollection(
    "service",
    ({ data }) => data?.lang === lang
  );
  return services.map((item) => item.data).slice(0, max_items);
};

const stories = (await fetchStories()) as Array<ServiceData>;

const renderedContent = renderRichText(content);

const id = getIdFromContent(content);
---

<section
  class={`${padding_top} ${padding_bottom} ${surface}`}
  {...storyblokEditable(blok)}
>
  <div class="content-grid gap-y-8" {id}>
    {
      renderedContent && (
        <div class={`${container} grid gap-2`}>
          <div class="richtext max-w-2xl" set:html={renderedContent} />
        </div>
      )
    }

    {
      stories.length > 0 && (
        <div
          class={`${container} flex flex-wrap gap-x-4 gap-y-6 md:gap-x-8 md:gap-y-10`}
        >
          {stories.map((story) => (
            <PostCard
              {...story}
              full_slug={story.full_slug}
              accent={accent_surface}
              compact={true}
              wide={true}
              min_width="min-w-[270px]"
            />
          ))}
        </div>
      )
    }
  </div>
</section>
