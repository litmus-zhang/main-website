---
import { storyblokEditable, renderRichText } from "@storyblok/astro";
/* import { Icon } from "astro-icon/components"; */
import VideoInline from "@components/media/VideoInline.vue";
import Picture from "@components/media/Picture.astro";
import Link from "@components/navigation/Link.astro";

interface Props {
  blok: HeroStoryblok;
}

const { blok } = Astro.props;
const {
  links,
  title,
  content,
  video,
  thumbnail,
  surface,
  bg_opacity,
  accent_color,
} = blok;

const text = renderRichText(content);
---

<div
  style={`--accent-color: rgb(var(${accent_color}));`}
  {...storyblokEditable(blok)}
  class={`${surface || ""} hero relative grid grid-cols-1 items-center parallax-wrap overflow-hidden`}
>
  {
    thumbnail && (
      <div class={`parallax absolute inset-0 ${bg_opacity || ""}`}>
        {video?.filename && (
          <VideoInline url={video.filename} client:visible className="">
            {thumbnail?.filename && (
              <Picture
                src={thumbnail.filename}
                alt={thumbnail.alt || title}
                sizes={`100vw`}
                ar={21 / 9}
                layout="fill"
                breakpoints={[320, 500, 760, 960]}
                loading="eager"
                artDirectives={[
                  {
                    media: "(max-width: 768px)",
                    ar: 1 / 1,
                    breakpoints: [320, 440, 640, 768],
                  },
                ]}
              />
            )}
          </VideoInline>
        )}
        {!video?.filename && thumbnail?.filename && (
          <Picture
            src={thumbnail.filename}
            alt={thumbnail.alt || title}
            sizes={`100vw`}
            ar={21 / 9}
            layout="fill"
            className="parallax"
            loading="eager"
            breakpoints={[320, 500, 760, 960]}
            artDirectives={[
              {
                media: "(max-width: 768px)",
                ar: 1 / 1,
                breakpoints: [320, 440, 640, 768],
              },
            ]}
          />
        )}
      </div>
    )
  }

  <div class="content-grid relative h-fit">
    <div
      class="breakout align-items-end grid grid-cols-1 gap-3 text-balance py-20 lg:grid-cols-10 lg:gap-8 lg:py-28 xl:py-20"
    >
      <h1
        class="max-w-3xl text-4xl md:text-5xl lg:col-span-6 lg:text-6xl xl:text-7xl"
        set:html={title}
      />

      <div
        class={`lg:col-span-4 flex flex-col relative justify-end gap-3 ${links && links.length > 0 && "lg:-mb-122"}`}
      >
        {content && <div class="text-xl" set:html={text} />}
        {
          links && links.length > 0 && (
            <div class="mt-2 flex w-fit items-center gap-2 lg:absolute lg:inset-x-0 lg:bottom-0 lg:translate-y-full lg:pt-5">
              {links.map((link) => (
                <Link blok={link} />
              ))}
            </div>
          )
        }
      </div>
    </div>
  </div>
</div>

<style is:global>
  @screen md {
    .hero {
      min-height: max(100svh, 30rem);
    }
  }

  .hero {
    h1 {
      strong,
      b,
      bold {
        font-weight: inherit;
        color: var(--accent-color);
      }
    }
  }
</style>
